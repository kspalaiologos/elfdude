 ██████████ █████       ███████████     █████                █████          |
░░███░░░░░█░░███       ░░███░░░░░░█    ░░███                ░░███           |
 ░███  █ ░  ░███        ░███   █ ░   ███████  █████ ████  ███████   ██████  |
 ░██████    ░███        ░███████    ███░░███ ░░███ ░███  ███░░███  ███░░███ |
 ░███░░█    ░███        ░███░░░█   ░███ ░███  ░███ ░███ ░███ ░███ ░███████  |
 ░███ ░   █ ░███      █ ░███  ░    ░███ ░███  ░███ ░███ ░███ ░███ ░███░░░   |
 ██████████ ███████████ █████      ░░████████ ░░████████░░████████░░██████  |
░░░░░░░░░░ ░░░░░░░░░░░ ░░░░░        ░░░░░░░░   ░░░░░░░░  ░░░░░░░░  ░░░░░░   |
____________________________________________________________________________+
                                                                       v0.003
a small & primitive ELF32 packer
                                                    (c) 2024 kamila szewczyk,
                         prototyped on a sunny sunday afternoon of 23-06-2024

===> table of contents

1. introduction
2. basic usage
3. rpn calculator
4. how it works
5. limitations
6. acknowledgements, copyright & license

===> 1. introduction

elfdude is a versatile executable packer. it's capable of generating tiny ELF
files that run on 32-bit x86 Linux systems (i386 or later). it fills the
niche of a small, simple and easy-to-use packer that generates ELF32 files.

comparison with other ELF processors:
- upx: elfdude is much simpler and smaller, supports and more advanced
  compression algorithms. upx is generally more serious (it supports many
  other platforms besides i386 Linux) but offers worse compression ratio on
  very small files (demos) and on very large files (UCL does not scale).
  elfdude is also generally slower than upx. currently, it also does not
  implement some UPX features.
- ezuri, midgetpack: elfdude is merely a packer and not an encryption tool,
  not intended to be used for malware. ezuri/midgetpack do not support
  compression. elfdude does not provide the same level of security as
  either.
- gzexe: elfdude is generally competitive with gzexe in terms of compression
  ratio. gzexe generates shell scripts, not ELF files. further, it depends
  on the system's gzip implementation, which may not be available.
- papaw: similar to elfdude. elfdude is generally a bit more advanced and
  efficient.

===> 2. basic usage

refer to `elfdude -h'. generally, `-m X' sets the compression mode. the
number does not really correspond to compression quality, so make sure to
test a bunch. 

`--bss_size' and `--bss_base' set the base address and the size of the bss
section in the packed image. it's a zeroed section meant for static data.

`--image_base' sets the base address of the image (the entry point). it's
usually within the first 16M of the address space, but you can set it to
more or less whatever.

`--image_pad' specifies the size of zero-padding after the image in the
packed file. it's useful for self-modifying code assuming `--wx' is not set.

`--wx' makes the pages containing the entry point read-only. this is useful
for compatibility with some systems like selinux that implement data
execution prevention.

`--bcj' enables the x86 branch compression filter. it's a simple filter that
compresses the x86 instructions. it sometimes improves the compression ratio.

invocation example:

>>>
% cat > hello.asm <<EOF
; hello.asm: binary format, 32bit, origin 0x1000000
use32
org 0x1000000
mov eax, 4
mov ebx, 1
mov ecx, message
mov edx, 51
int 0x80
mov eax, 1
xor ebx, ebx
int 0x80
message: db 'HelloHelloHelloHelloHelloHelloHelloHelloHelloHello', 0x0a
EOF

% fasm hello.asm hello.bin     # assembles the source

% elfdude -m 1                 # sets the method to LZSS
        --image_base=0x1000000 # sets the image base address
        --image_pad=32         # adds extra padding at the end
        --bss_base=0x2000000   # sets the bss base address
        --bss_size=32          # sets the bss size
        hello.bin hello.elf
<<<

===> 3. rpn calculator

>>>
use32
org 0x1000000
;; Entry point.
_entry:
  jmp main
;; Stack operations: push, pop.
;; Calling convention: MS fastcall.
stkpush:
  mov edx, eax
  mov eax, DWORD [rpnstack_size]
  lea ecx, [eax+1]
  mov DWORD [rpnstack_size], ecx
  mov DWORD [rpnstack+eax*4], edx
  ret
stkpop:
  mov eax, DWORD [rpnstack_size]
  dec eax
  mov DWORD [rpnstack_size], eax
  mov eax, DWORD [rpnstack+eax*4]
  ret
;; The main function.
main:
  push ebx
  ;; We need to clear the BSS ourselves.
  push 256
  push 0
  push rpnstack
  call wipe
.input_loop:
  call getchar
  cmp eax, -1
  je .eof
  ; Determine if eax is a number.
  lea edx, [eax-'0']
  cmp edx, 9
  ja .parse_operator
  xor ebx, ebx
.parse_number:
  ; n = n * 10 + (c - '0')
  lea edx, [eax-'0']
  cmp edx, 9
  ja  .parse_number_done
  imul ebx, ebx, 10
  lea ebx, [eax-'0'+ebx]
  call getchar
  jmp .parse_number
.parse_number_done:
  mov eax, ebx
  jmp .operator_done
.parse_operator:
  cmp eax, '+'
  jne .not_plus
  call stkpop
  mov edx, eax
  call stkpop
  add eax, edx
  jmp .operator_done
.not_plus:
  cmp eax, '-'
  jne .not_minus
  call stkpop
  mov edx, eax
  call stkpop
  sub eax, edx
  jmp .operator_done
.not_minus:
  cmp eax, '*'
  jne .not_times
  call stkpop
  mov edx, eax
  call stkpop
  imul eax, edx
  jmp .operator_done
.not_times:
  cmp eax, '/'
  jne .not_slash
  call stkpop
  mov ecx, eax
  call stkpop
  cdq
  idiv ecx
.operator_done:
  call stkpush
  jmp .input_loop
.not_slash:
  cmp eax, 10
  jne .input_loop
  xor ebx, ebx
.print_stack:
  cmp DWORD [rpnstack_size], ebx
  jle .input_loop
  push DWORD [rpnstack+ebx*4]
  call print_number
  mov eax, DWORD [rpnstack_size]
  dec eax
  ; Stupid hack.
  mov edx, ' '
  cmp eax, ebx
  jne .not_end
  mov edx, 10 ; '\n'
.not_end:
  push edx
  call putchar
  inc ebx
  jmp .print_stack
.eof:
  mov eax, 1
  mov ebx, 0
  int 0x80
;; Convenient wrappers over Linux syscalls.
;; read(fd = esp+8, buf = esp+12, count = esp+16) -> eax
read:
  push ebx
  mov ecx, DWORD [esp+12]
  mov edx, DWORD [esp+16]
  mov eax, 3
  mov ebx, DWORD [esp+8]
  int 0x80
  pop ebx
  ret
;; write(fd = esp+8, buf = esp+12, count = esp+16) -> eax
write:
  push ebx
  mov ecx, DWORD [esp+12]
  mov edx, DWORD [esp+16]
  mov eax, 4
  mov ebx, DWORD [esp+8]
  int 0x80
  pop ebx
  ret
;; getchar() -> eax
getchar:
  push ebx
  lea ecx, [esp-4]
  mov eax, 3
  xor ebx, ebx
  mov edx, 1
  int 0x80
  or  edx, -1
  test eax, eax
  jle .no_eof
  mov edx, DWORD [esp-4]
.no_eof:
  mov eax, edx
  pop ebx
  ret
;; putchar(c = esp+8) -> eax
putchar:
  push ebx
  mov eax, 4
  mov ebx, 1
  lea ecx, [esp+8]
  mov edx, ebx
  int 0x80
  pop ebx
  ret
;; print_number(n = esp+8)
print_number:
  push ebp
  push edi
  push esi
  push ebx
  sub esp, 32
  mov esi, DWORD [esp+32+20]
  test esi, esi
  jne .nonzero
  mov DWORD [esp+16], '0'
  mov eax, 4
  mov ebx, 1
  lea ecx, [esp+16]
  mov edx, ebx
  int 0x80
  jmp .end
.nonzero:
  jns .positive
  mov DWORD [esp+16], '-'
  mov eax, 4
  mov ebx, 1
  lea ecx, [esp+16]
  mov edx, ebx
  int 0x80
  neg esi
.positive:
  xor edi, edi
  lea ebx, [esp+15]
  mov ecx, 10
.make_buffer:
  inc edi
  mov eax, esi
  cdq
  idiv ecx
  mov esi, eax
  add edx, 48
  mov BYTE [ebx+edi], dl
  test eax, eax
  jne .make_buffer
  lea ebp, [esp+16]
  mov esi, 4
.print_buffer:
  dec edi
  movsx eax, BYTE [edi+ebp]
  mov DWORD [esp+12], eax
  mov eax, esi
  mov ebx, 1
  lea ecx, [esp+12]
  mov edx, ebx
  int 0x80
  test edi, edi
  jne .print_buffer
.end:
  add esp, 32
  pop ebx
  pop esi
  pop edi
  pop ebp
  ret
;; wipe(dst = esp+8, c = esp+12, count = esp+16)
wipe:
  push edi
  mov eax, DWORD [esp+12]
  mov ecx, DWORD [esp+16]
  mov edi, DWORD [esp+8]
  rep stosb
  pop edi
  ret

;; "BSS" (no --wx)
rpnstack: times 255 dd 0
rpnstack_size: dd 0
<<<

===> 4. how it works

elfdude uses a bunch of stubs written using fasm syntax; the packer modifies
the addresses, offsets and sizes in the stubs to match the packed image. the
stub is a simple ELF32 executable that allocates pages with `mmap' for the
resulting machine code and the bss section. then, the data appended to the
stub is decompressed and copied to the allocated memory. the entry point (the
first instruction at the base address) is then executed. register state is
preserved on stub startup and restored before the jump to the entry point.

methods:
- lzmw: Lempel-Ziv-Miller-Wegman, variant of LZW that adapts quicker.
- lzss: Lempel-Ziv-Storer-Szymanski, a simple dictionary-based algorithm
        it uses a byte-wise encoding similar to this of LZ4.
- store: no compression, just stores the data.

===> 5. limitations

Current list of improvements yet to be made:

- support for W^X systems.
- support for (dynamically linked) ELFs.
- tool that turns ELFs into flat images.
- support for transforms (e.g. e8-e9).
- support for more algorithms.
- support FreeBSD/OpenBSD/NetBSD
- golf down the stubs.
- fix the base address of the ELF stubs.
- support shell script stubs like gzexe.

===> 6. acknowledgements, copyright & license

elfdude was written by kamila szewczyk in 2024. it can be freely distributed
as freeware. the author is not responsible for any damage caused by the use
of this software. the software is provided as-is and comes with no warranty.

thanks to:
- andy kelley for zig-cc
- tomek grysztar for fasm
- rich felker for musl
- mark oberhumer for upx
- many more. feel like you should be on the list? let me know.

https://palaiologos.rocks - kspalaiologos@gmail.com

